<!-- views/layouts/index.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Your EJS Project</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <style>
      body {
        font-family: "Arial", sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f5f5f5;
      }

      header {
        background-color: #333;
        color: white;
        padding: 10px;
        text-align: center;
      }

      main {
        max-width: 800px;
        margin: 20px auto;
        background-color: white;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      h1,
      h3 {
        color: #333;
      }

      form {
        margin-bottom: 20px;
      }

      label {
        display: block;
        margin-bottom: 5px;
        color: #333;
      }

      input {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        box-sizing: border-box;
      }

      button {
        padding: 10px;
        background-color: #333;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }

      button:hover {
        background-color: #555;
      }

      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }

      th,
      td {
        border: 1px solid #ddd;
        padding: 10px;
        text-align: left;
      }

      th {
        background-color: #333;
        color: white;
      }

      a {
        color: #333;
        text-decoration: none;
      }

      a:hover {
        text-decoration: underline;
      }
      .content {
        text-align: center;
      }

      .pagination {
        display: inline-block;
      }

      .pagination button {
        background-color: #000;
        color: white;
        border: 1px solid #ddd;
        padding: 8px 16px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 15px 3px;
        cursor: pointer;
        border-radius: 5px;
      }

      .pagination button.active {
        background-color: #45a049;
      }

      .pagination button:hover:not(.active) {
        background-color: #ddd;
      }
    </style>
  </head>
  <body style="margin: 50px">
    <%- include('../partials/header') %> <%- body %> <%-
    include('../partials/table') %> <%- include('../partials/Search') %> <%-
    include('../partials/footer') %>
  </body>

  <script>
    async function deleteItem(id) {
      try {
        const response = await fetch(`/${id}`, {
          method: "DELETE",
        });

        if (!response.ok) {
          throw new Error("Network response was not ok");
        }

        // If the deletion is successful, remove the table row from the DOM
        var trow = document.getElementById(id);
        trow.remove();
        var tdow = document.getElementsByClassName(id);
        for (var i = 0; i < tdow.length; i++) {
          tdow[i].remove();
        }
      } catch (error) {
        console.error("Error deleting user:", error);
      }
    }
    document
      .getElementById("userForm")
      .addEventListener("submit", async function (event) {
        event.preventDefault(); // Prevent form submission initially
        console.log("Form submission prevented");

        var username = document.getElementById("usernameInput");
        var password = document.getElementById("passwordInput");
        var email = document.getElementById("emailInput");
        var phone = document.getElementById("phoneInput");

        // Clear any existing error messages
        document.getElementById("usernameError").textContent = "";
        document.getElementById("passwordError").textContent = "";
        document.getElementById("emailError").textContent = "";
        document.getElementById("phoneError").textContent = "";

        // Client-side validation
        var isValid = true; // Flag to check if all fields are valid

        if (username.value.length < 5) {
          document.getElementById("usernameError").textContent =
            "Username must be at least 5 characters.";
          isValid = false;
        }

        if (password.value.length < 8) {
          document.getElementById("passwordError").textContent =
            "Password must be at least 8 characters.";
          isValid = false;
        }

        var emailRegex = /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/;
        if (!email.value.match(emailRegex)) {
          document.getElementById("emailError").textContent =
            "Please enter a valid email address.";
          isValid = false;
        }

        var phoneRegex = /^\d{10}$/;
        if (!phone.value.match(phoneRegex)) {
          document.getElementById("phoneError").textContent =
            "Please enter a valid 10-digit phone number.";
          isValid = false;
        }

        // If client-side validation fails, stop the function
        if (!isValid) {
          console.log("Client-side validation failed");
          return;
        }

        try {
          const response = await fetch("/", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              username: username.value,
              password: password.value,
              email: email.value,
              phone: phone.value,
            }),
          });

          const data = await response.json();

          if (response.status === 200) {
            // Success, handle accordingly
            window.location.href = "/"; // Redirect to the root UR
          } else {
            if (data.field === "username") {
              document.getElementById("usernameError").textContent =
                data.message;
            } else if (data.field === "email") {
              document.getElementById("emailError").textContent = data.message;
            } else if (data.field === "password") {
              document.getElementById("passwordError").textContent =
                data.message;
            } else if (data.field === "phone") {
              document.getElementById("phoneError").textContent = data.message;
            }
          }
        } catch (error) {
          console.error("Error submitting form:", error);
        }
      });

    function toggleEdit(userId) {
      var editRows = document.getElementsByClassName(userId);
      for (var i = 0; i < editRows.length; i++) {
        editRows[i].style.display =
          editRows[i].style.display === "none" ? "table-row" : "none";
      }
    }

    // CLIENT-SIDE JS FOR EDIT..
    var editButton = document.getElementById("editButton");

    editButton.addEventListener("click", async function (e) {
      e.preventDefault();

      console.log("Edit button clicked");

      // Get user data from form inputs
      var form = e.target.closest("form");
      var editOption = form.querySelector("#editOption");
      var editInput = form.querySelector("#editInput");

      // Clear any existing error messages
      form.querySelector("#Error").textContent = "";

      // Check for empty fields
      if (!editInput.value) {
        form.querySelector("#Error").textContent = "Field cannot be empty.";
        return;
      }

      // Prepare data to be sent
      var data = {
        field: editOption.value,
        value: editInput.value,
      };

      console.log("Data to be sent:", data); // Debugging line

      // Get user id from the id of the edit button
      var userId = form.dataset.userId;

      // Make Fetch PATCH request
      try {
        const response = await fetch(`/${userId}`, {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        console.log("Server response:", response); // Debugging line

        if (response.status === 200) {
          // Success, handle accordingly
          const responseData = await response.json();
          console.log("Update successful:", responseData);

          // Update the table row with the new data
          var tableRow = document.getElementById(userId);
          tableRow.cells[0].innerText =
            editOption.value === "username"
              ? editInput.value
              : tableRow.cells[0].innerText;
          tableRow.cells[1].innerText =
            editOption.value === "email"
              ? editInput.value
              : tableRow.cells[1].innerText;
          tableRow.cells[2].innerText =
            editOption.value === "phone"
              ? editInput.value
              : tableRow.cells[2].innerText;

          // Hide the edit row again
          form.closest("tr").style.display = "none";

          // Clear the input fields
          editOption.value = "";
          editInput.value = "";
        } else {
          // Validation error, display error message
          const errorData = await response.json();
          console.error("Validation error:", errorData);
          form.querySelector("#Error").textContent = errorData.message;
        }
      } catch (error) {
        console.error("An error occurred:", error);
      }
    });

    document.addEventListener("DOMContentLoaded", function () {
      const content = document.querySelector(".content");
      const itemsPerPage = 10;
      let currentPage = 0;
      const items = Array.from(content.querySelectorAll("tbody tr"));

      function showPage(page) {
        const startIndex = page * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        items.forEach((item, index) => {
          item.style.display =
            index < startIndex ||
            index >= endIndex ||
            (index - startIndex) % 2 === 1
              ? "none"
              : "";
        });
        updateActiveButtonStates();
      }

      function createPageButtons() {
        const totalPages = Math.ceil(items.length / itemsPerPage);
        const paginationContainer = document.createElement("div");
        paginationContainer.classList.add("pagination");

        // Add page buttons
        for (let i = 0; i < totalPages; i++) {
          const pageButton = document.createElement("button");
          pageButton.textContent = i + 1;
          pageButton.addEventListener("click", () => {
            currentPage = i;
            showPage(currentPage);
          });

          paginationContainer.appendChild(pageButton);
        }

        content.appendChild(paginationContainer);
      }

      function updateActiveButtonStates() {
        const pageButtons = document.querySelectorAll(".pagination button");
        pageButtons.forEach((button, index) => {
          if (index === currentPage) {
            button.classList.add("active");
          } else {
            button.classList.remove("active");
          }
        });
      }

      createPageButtons(); //to create the page buttons initially
      showPage(currentPage); // show the first page initially
    });

    // Code for Search
    let searchPerformed = false;
    document
      .getElementById("searchForm")
      .addEventListener("submit", function (event) {
        event.preventDefault();

        searchPerformed = true;

        const searchOption = document.getElementById("searchOption").value;
        const searchInput = document.getElementById("searchInput").value;

        fetch("/search", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ searchOption, searchInput }),
        })
          .then((response) => response.json())
          .then((data) => {
            const resultsBody = document.querySelector("#results tbody");
            resultsBody.innerHTML = ""; // Clear any previous results
            if (data.length == 0 && searchPerformed) {
              resultsBody.innerHTML =
                '<tr><td colspan="3">No data matches</td></tr>';
            } else {
              data.forEach((user) => {
                const row = document.createElement("tr");
                row.innerHTML = `<td>${user.username}</td><td>${user.email}</td><td>${user.phone}</td>`;
                resultsBody.appendChild(row);
              });
            }
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      });
  </script>
</html>
