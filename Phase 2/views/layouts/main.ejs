<!-- views/layouts/index.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Your EJS Project</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="/pagination.js"></script>
    <style>
      body {
        font-family: "Arial", sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f5f5f5;
      }

      header {
        background-color: #333;
        color: white;
        padding: 10px;
        text-align: center;
      }

      main {
        max-width: 800px;
        margin: 20px auto;
        background-color: white;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      h1,
      h3 {
        color: #333;
      }

      form {
        margin-bottom: 20px;
      }

      label {
        display: block;
        margin-bottom: 5px;
        color: #333;
      }

      input {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        box-sizing: border-box;
      }

      button {
        padding: 10px;
        background-color: #333;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }

      button:hover {
        background-color: #555;
      }

      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }

      th,
      td {
        border: 1px solid #ddd;
        padding: 10px;
        text-align: left;
      }

      th {
        background-color: #333;
        color: white;
      }

      a {
        color: #333;
        text-decoration: none;
      }

      a:hover {
        text-decoration: underline;
      }
      .content {
        text-align: center;
      }
    </style>
  </head>
  <body style="margin: 50px">
    <%- include('../partials/header') %> <%- body %> <%-
    include('../partials/table') %> <%- include('../partials/Search') %> <%-
    include('../partials/footer') %>
  </body>

  <script>
    // POST
    document
      .getElementById("userForm")
      .addEventListener("submit", async function (event) {
        event.preventDefault(); // Prevent form submission initially

        var username = document.getElementById("usernameInput");
        var password = document.getElementById("passwordInput");
        var email = document.getElementById("emailInput");
        var phone = document.getElementById("phoneInput");

        // Clear any existing error messages
        document.getElementById("usernameError").textContent = "";
        document.getElementById("passwordError").textContent = "";
        document.getElementById("emailError").textContent = "";
        document.getElementById("phoneError").textContent = "";

        // Client-side validation
        var isValid = true; // Flag to check if all fields are valid

        if (username.value.length < 5) {
          document.getElementById("usernameError").textContent =
            "Username must be at least 5 characters.";
          isValid = false;
        }

        if (password.value.length < 8) {
          document.getElementById("passwordError").textContent =
            "Password must be at least 8 characters.";
          isValid = false;
        }

        var emailRegex = /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/;
        if (!email.value.match(emailRegex)) {
          document.getElementById("emailError").textContent =
            "Please enter a valid email address.";
          isValid = false;
        }

        var phoneRegex = /^\d{10}$/;
        if (!phone.value.match(phoneRegex)) {
          document.getElementById("phoneError").textContent =
            "Please enter a valid 10-digit phone number.";
          isValid = false;
        }

        // If client-side validation fails, stop the function
        if (!isValid) {
          console.log("Client-side validation failed");
          return;
        }

        // Prepare data to be sent
        var data = {
          username: username.value,
          password: password.value,
          email: email.value,
          phone: phone.value,
        };

        // Make Fetch POST request
        try {
          const response = await fetch("/", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          });

          const responseData = await response.json();

          if (response.status === 200) {
            // Clear the input fields
            username.value = "";
            email.value = "";
            password.value = "";
            phone.value = "";

            // Get the table body
            var tableBody = document.getElementById("tablebody");

            // Create a new row and cells
            var newRow1 = document.createElement("tr");
            newRow1.id = responseData.user._id; // Assuming responseData.user._id contains the user id

            var usernameCell = document.createElement("td");
            var emailCell = document.createElement("td");
            var phoneCell = document.createElement("td");
            var changesCell = document.createElement("td");

            // Set the text content of the cells
            usernameCell.textContent = responseData.user.username;
            emailCell.textContent = responseData.user.email;
            phoneCell.textContent = responseData.user.phone;

            // Create Edit and Delete buttons
            var editButton = document.createElement("button");
            editButton.textContent = "Edit";
            editButton.onclick = function () {
              toggleEdit(responseData.user._id);
            };

            var deleteButton = document.createElement("button");
            deleteButton.textContent = "Delete";
            deleteButton.onclick = function () {
              deleteItem(responseData.user._id);
            };

            // Append the buttons to the changes cell
            changesCell.appendChild(editButton);
            changesCell.appendChild(deleteButton);

            // Append the cells to the new row
            newRow1.appendChild(usernameCell);
            newRow1.appendChild(emailCell);
            newRow1.appendChild(phoneCell);
            newRow1.appendChild(changesCell);

            // Create a second new row for the form
            var newRow2 = document.createElement("tr");
            newRow2.className = responseData.user._id;
            newRow2.style.display = "none";

            var formCell = document.createElement("td");

            // Create the form
            var form = document.createElement("form");
            form.action = "/";
            form.className = "editForm";
            form.dataset.userId = responseData.user._id;

            // Create the form elements and append them to the form
            var select = document.createElement("select");
            select.id = "editOption" + responseData.index; // Use the index from the server's response
            select.name = "editOption";

            var options = ["username", "email", "phone"];
            options.forEach(function (option) {
              var optionElement = document.createElement("option");
              optionElement.value = option;
              optionElement.textContent =
                option.charAt(0).toUpperCase() + option.slice(1);
              select.appendChild(optionElement);
            });

            var input = document.createElement("input");
            input.type = "text";
            input.id = "editInput" + responseData.index; // Use the index from the server's response
            input.name = "editInput";

            var errorSpan = document.createElement("span");
            errorSpan.id = "Error";

            var br = document.createElement("br");

            var submitButton = document.createElement("button");
            submitButton.type = "submit";
            submitButton.id = "editButton" + responseData.index; // Use the index from the server's response
            submitButton.style.marginTop = "5px";
            submitButton.textContent = "Update";

            form.appendChild(select);
            form.appendChild(input);
            form.appendChild(errorSpan);
            form.appendChild(br);
            form.appendChild(submitButton);

            // Append the form to the form cell
            formCell.appendChild(form);

            // Append the form cell to the second new row
            newRow2.appendChild(formCell);

            // Append the new rows to the table body
            tableBody.appendChild(newRow1);
            tableBody.appendChild(newRow2);
          } else {
            // Handle the error here
            console.error("An error occurred:", responseData);
          }
        } catch (error) {
          console.error("Error submitting form:", error);
        }
      });

    // CLIENT-SIDE JS FOR EDIT..
    const editForms = document.getElementsByClassName("editForm");

    Array.from(editForms).forEach(function (editForm) {
      editForm.addEventListener("submit", async function (e) {
        e.preventDefault();
        console.log("Update Button Clicked!");
        // Get user data from form inputs
        const index = e.target.dataset.index;
        const editOption = e.target.querySelector("#editOption" + index);
        const editInput = e.target.querySelector("#editInput" + index);

        // Clear any existing error messages
        e.target.querySelector("#Error").textContent = "";

        // Check for empty fields
        if (!editInput.value) {
          e.target.querySelector("#Error").textContent =
            "Field cannot be empty.";
          return;
        }

        // Prepare data to be sent
        const data = {
          field: editOption.value,
          value: editInput.value,
        };

        // Get user id from the id of the edit button
        const userId = e.target.dataset.userId;

        // Make Fetch PATCH request
        try {
          const response = await fetch(`/${userId}`, {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          });

          console.log(userId);
          if (response.status === 200) {
            // Success, handle accordingly
            const responseData = await response.json();
            console.log("Update successful:", responseData);

            // Update the table row with the new data
            var tableRow = document.getElementById(userId);
            tableRow.cells[0].innerText =
              editOption.value === "username"
                ? editInput.value
                : tableRow.cells[0].innerText;
            tableRow.cells[1].innerText =
              editOption.value === "email"
                ? editInput.value
                : tableRow.cells[1].innerText;
            tableRow.cells[2].innerText =
              editOption.value === "phone"
                ? editInput.value
                : tableRow.cells[2].innerText;

            // Hide the edit row again
            e.target.closest("tr").style.display = "none";

            // Clear the input fields
            editOption.value = "";
            editInput.value = "";
          } else {
            // Validation error, display error message
            const errorData = await response.json();
            console.error("Validation error:", errorData);
            e.target.querySelector("#Error").textContent = errorData.message;
          }
        } catch (error) {
          console.error("An error occurred:", error);
        }
      });
    });

    // Code for Search
    let searchPerformed = false;
    document
      .getElementById("searchForm")
      .addEventListener("submit", function (event) {
        event.preventDefault();

        searchPerformed = true;

        const searchOption = document.getElementById("searchOption").value;
        const searchInput = document.getElementById("searchInput").value;

        fetch("/search", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ searchOption, searchInput }),
        })
          .then((response) => response.json())
          .then((data) => {
            const resultsBody = document.querySelector("#results tbody");
            resultsBody.innerHTML = ""; // Clear any previous results
            if (data.length == 0 && searchPerformed) {
              resultsBody.innerHTML =
                '<tr><td colspan="3">No data matches</td></tr>';
            } else {
              data.forEach((user) => {
                const row = document.createElement("tr");
                row.innerHTML = `<td>${user.username}</td><td>${user.email}</td><td>${user.phone}</td>`;
                resultsBody.appendChild(row);
              });
            }
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      });
  </script>
</html>
